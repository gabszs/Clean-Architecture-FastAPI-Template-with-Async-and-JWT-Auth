[project]
name = "fastapi-complete"
version = "0.1.0"
description = ""
authors = [
    {name = "GabrielCarvalho",email = "gabrielcarvalho.workk@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.10,<3.14"
dependencies = [
    "fastapi (>=0.115.12,<0.116.0)",
    "uvicorn (>=0.34.2,<0.35.0)",
    "alembic (>=1.15.2,<2.0.0)",
    "asyncpg (>=0.30.0,<0.31.0)",
    "bcrypt (>=4.3.0,<5.0.0)",
    "python-jose (>=3.4.0,<4.0.0)",
    "pydantic-settings (>=2.9.1,<3.0.0)",
    "uvloop (>=0.21.0,<0.22.0)",
    "httptools (>=0.6.4,<0.7.0)",
    "sqlalchemy[postgresql-asyncpg] (>=2.0.41,<3.0.0)",
    "httpx (>=0.28.1,<0.29.0)",
    "pydantic[email] (>=2.11.4,<3.0.0)",
    "deprecated (>=1.2.18,<2.0.0)",
    "fastapi-cache2[redis] (>=0.2.2,<0.3.0)",
]

[tool.poetry.group.dev.dependencies]
pytest-cov = "^6.1.1"
taskipy = "^1.14.1"
ruff = "^0.11.10"
pytest-asyncio = "^0.26.0"
factory-boy = "^3.3.3"
freezegun = "^1.5.1"
faker = "^37.3.0"
ipykernel = "^6.29.5"
pytest = "^8.3.5"
pytest-postgresql = "^7.0.1"
psycopg2 = "^2.9.10"
icecream = "^2.1.4"
types-redis = "^4.6.0.20241004"

[tool.poetry.group.telemetry.dependencies]
opentelemetry-distro = "^0.54b1"
opentelemetry-exporter-otlp = "^1.33.1"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
package-mode = false

[tool.taskipy.tasks]
otel_setup = "opentelemetry-bootstrap -a install"
otel_run = 'opentelemetry-instrument uvicorn app.main:app --reload --proxy-headers --host 0.0.0.0 --port 8080'
run = 'uvicorn app.main:app --reload --port 8081'
lint = 'ruff check'
test = 'pytest -s -x --capture=no --cov=app -vv'
verbose_test = 'pytest --verbose --show-capture=all --exitfirst --cov=app --cov-report=term-missing -vv'
commit_hook = "pre-commit run --all-files"
post_verbose_test = 'coverage html'
post_test = 'coverage html'
load_env = "export $(grep -v '^#' .env | xargs)"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 120 # old one was 120
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = ["E701"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
