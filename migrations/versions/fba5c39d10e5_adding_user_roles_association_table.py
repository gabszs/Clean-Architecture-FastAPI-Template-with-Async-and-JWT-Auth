"""Adding User Roles association table

Revision ID: fba5c39d10e5
Revises: fa6c105ff4f5
Create Date: 2025-02-04 22:09:56.545929

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fba5c39d10e5'
down_revision: Union[str, None] = 'fa6c105ff4f5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_roles',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('role_id', sa.Uuid(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('user_id', 'role_id', name='uq_user_role')
    )
    op.create_unique_constraint('uq_roles_id', 'roles', ['id'])
    op.drop_constraint('roles_tenant_id_fkey', 'roles', type_='foreignkey')
    op.create_foreign_key('fk_roles_tenants', 'roles', 'tenants', ['tenant_id'], ['id'], ondelete='SET NULL')
    op.add_column('users', sa.Column('tenant_id', sa.Uuid(), nullable=True))
    op.create_foreign_key('fk_users_tenants', 'users', 'tenants', ['tenant_id'], ['id'])
    op.drop_column('users', 'role')
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('role', postgresql.ENUM('ADMIN', 'MODERATOR', 'BASE_USER', 'GUEST', name='userroles'), server_default=sa.text("'BASE_USER'::userroles"), autoincrement=False, nullable=False))
    op.drop_constraint('fk_users_tenants', 'users', type_='foreignkey')
    op.drop_column('users', 'tenant_id')
    op.drop_constraint('fk_roles_tenants', 'roles', type_='foreignkey')
    op.create_foreign_key('roles_tenant_id_fkey', 'roles', 'tenants', ['tenant_id'], ['id'])
    op.drop_constraint('uq_roles_id', 'roles', type_='unique')
    op.drop_table('user_roles')